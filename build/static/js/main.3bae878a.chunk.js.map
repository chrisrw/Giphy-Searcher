{"version":3,"sources":["shared/AppIcons.js","components/SearchForm.js","components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["SearchIcon","props","height","width","version","xmlns","viewBox","role","aria-labelledby","id","fill","d","SearchForm","handleSubmit","handleChange","searchString","onSubmit","className","placeholder","type","name","required","onChange","value","SearchResults","images","length","map","image","key","src","downsized_large","url","alt","title","App","searchOptions","process","REACT_APP_GIPHY_KEY","limit","rating","api","endpoint","useState","setImages","setSearchString","getImages","offset","fetch","then","response","json","data","catch","console","error","useEffect","event","target","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4LAEO,SAASA,EAAWC,GAAQ,IACzBC,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,MAChB,OACE,yBACEC,QAAQ,MACRC,MAAM,6BACNC,QAAQ,YACRJ,OAAQA,GAAU,OAClBC,MAAOA,GAAS,OAChBI,KAAK,MACLC,kBAAgB,SAEhB,2BAAOC,GAAG,SAAV,UACA,0BACEC,KAAK,eACLC,EAAE,+UCKKC,MAnBf,SAAoBX,GAAQ,IAClBY,EAA6CZ,EAA7CY,aAAcC,EAA+Bb,EAA/Ba,aAAcC,EAAiBd,EAAjBc,aACpC,OACE,0BAAMC,SAAUH,EAAcI,UAAU,mBACtC,2BACEC,YAAY,SACZC,KAAK,OACLC,KAAK,eACLC,UAAQ,EACRC,SAAUR,EACVS,MAAOR,IAET,4BAAQI,KAAK,UACX,kBAACnB,EAAD,CAAYE,OAAO,OAAOC,MAAM,YCMzBqB,MApBf,SAAuBvB,GAAO,IAEpBwB,EAAWxB,EAAXwB,OAGR,OAAKA,EAAOC,OAKV,yBAAKT,UAAU,WACZQ,EAAOE,KAAI,SAAAC,GAAK,OACf,yBAAKC,IAAKD,EAAMnB,GAAIQ,UAAU,OAC5B,yBAAKA,UAAU,UAAUa,IAAKF,EAAMH,OAAOM,gBAAgBC,IAAKC,IAAKL,EAAMM,aAP1E,iDC6CIC,MAjDf,WACE,IAAMC,EAAgB,CACpBP,IAAKQ,8CAAYC,oBACjBC,MAAO,GACPC,OAAQ,IACRC,IAAK,gCACLC,SAAU,WANC,EASeC,mBAAS,IATxB,mBASNlB,EATM,KASEmB,EATF,OAU2BD,mBAAS,WAVpC,mBAUN5B,EAVM,KAUQ8B,EAVR,KAgBb,SAASC,IACP,IAAMd,EAAG,UAAMI,EAAcK,KAApB,OAA0BL,EAAcM,SAAxC,oBAA4DN,EAAcP,IAA1E,cAAmFd,EAAnF,mBAA0GqB,EAAcG,MAAxH,mBAAwIH,EAAcW,OAAtJ,mBAAuKX,EAAcI,OAArL,YAETQ,MAAMhB,GACHiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJN,EAAUM,EAASE,SAEpBC,MAAMC,QAAQC,OAYnB,OAxBAC,qBAAU,WACRV,MACC,IAuBD,oCACE,8CACA,kBAAC,EAAD,CACEhC,aAbN,SAAsB2C,GACpBZ,EAAgBY,EAAMC,OAAOnC,QAazBV,aAVN,SAAsB4C,GACpBA,EAAME,iBACNb,KASI/B,aAAcA,IAEhB,kBAAC,EAAD,CAAeU,OAAQA,MCpCTmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.3bae878a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function SearchIcon(props) {\n  const { height, width } = props;\n  return (\n    <svg\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      height={height || \"1rem\"}\n      width={width || \"1rem\"}\n      role=\"img\"\n      aria-labelledby=\"title\"\n    >\n      <title id=\"title\">Search</title>\n      <path\n        fill=\"currentColor\"\n        d=\"M9.516 14.016c2.484 0 4.5-2.016 4.5-4.5s-2.016-4.5-4.5-4.5-4.5 2.016-4.5 4.5 2.016 4.5 4.5 4.5zM15.516 14.016l4.969 4.969-1.5 1.5-4.969-4.969v-0.797l-0.281-0.281c-1.125 0.984-2.625 1.547-4.219 1.547-3.609 0-6.516-2.859-6.516-6.469s2.906-6.516 6.516-6.516 6.469 2.906 6.469 6.516c0 1.594-0.563 3.094-1.547 4.219l0.281 0.281h0.797z\"\n      ></path>\n    </svg>\n  );\n}\n","import React from \"react\";\nimport { SearchIcon } from \"../shared/AppIcons\";\n\nfunction SearchForm(props) {\n  const { handleSubmit, handleChange, searchString } = props;\n  return (\n    <form onSubmit={handleSubmit} className=\"form-horizontal\">\n      <input\n        placeholder=\"Search\"\n        type=\"text\"\n        name=\"searchString\"\n        required\n        onChange={handleChange}\n        value={searchString}\n      />\n      <button type=\"submit\">\n        <SearchIcon height=\"2rem\" width=\"2rem\" />\n      </button>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction SearchResults(props) {\n  // destructure the images array from the props object\n  const { images } = props;\n\n  // return early if there are no images\n  if (!images.length) {\n    return <h2>No Images Found!</h2>;\n  }\n\n  return (\n    <div className=\"gallery\">\n      {images.map(image => (\n        <div key={image.id} className=\"gif\">\n          <img className=\"imgSize\" src={image.images.downsized_large.url} alt={image.title} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default SearchResults;\n","import React, { useState, useEffect } from \"react\";\nimport SearchForm from \"./components/SearchForm\";\nimport SearchResults from \"./components/SearchResults\";\n\nfunction App() {\n  const searchOptions = {\n    key: process.env.REACT_APP_GIPHY_KEY,\n    limit: 25,\n    rating: \"G\",\n    api: \"https://api.giphy.com/v1/gifs\",\n    endpoint: \"/search\"\n  };\n\n  const [images, setImages] = useState([]);\n  const [searchString, setSearchString] = useState(\"minions\");\n\n  useEffect(() => {\n    getImages();\n  }, []);\n\n  function getImages() {\n    const url = `${searchOptions.api}${searchOptions.endpoint}?api_key=${searchOptions.key}&q=${searchString} &limit=${searchOptions.limit}&offset=${searchOptions.offset}&rating=${searchOptions.rating}&lang=en`;\n\n    fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        setImages(response.data);\n      })\n      .catch(console.error);\n  }\n\n  function handleChange(event) {\n    setSearchString(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    getImages();\n  }\n\n  return (\n    <>\n      <h1>Giphy Searcher</h1>\n      <SearchForm\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n        searchString={searchString}\n      />\n      <SearchResults images={images} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}